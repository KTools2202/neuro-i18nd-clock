name: Release & Publish

# Trigger whenever you push a tag that starts with “v”, e.g. “v1.2.3”
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write     # needed for creating draft releases

jobs:
  build_exe:
    name: Build EXE (PyInstaller) on ${{ matrix.os }}
    runs-on: ${{ matrix.runner_os }}
    strategy:
      matrix:
        runner_os: ["windows-latest", "macos-latest", "ubuntu-latest"]
        include:
          - runner_os: "windows-latest"
            os: "Windows"
          - runner_os: "macos-latest"
            os: "Mac"
          - runner_os: "ubuntu-latest"
            os: "Linux"

    steps:
      # 1.1) Check out your repository at the pushed tag
      - name: Checkout code
        uses: actions/checkout@v4

      # 1.2) Set up Python 3.11 (or bump to whatever version you need)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      # 1.3) Install any runtime dependencies (if your EXE needs them)
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # 1.4) Build a single-file EXE (or macOS/Linux binary) with PyInstaller
      - name: PyInstaller → Single executable
        run: |
          pyinstaller --onefile --windowed src/nuru_clock/__main__.py --name "${{ github.repository_id }}_${{ matrix.os }}"

      # 1.5) Show what’s in dist/ for debugging
      - name: List out dist/ directory
        run: ls -R dist

      # 1.6) Package the dist/ files into a single archive per OS:
      - name: Tar on Ubuntu
        if: ${{ matrix.runner_os == 'ubuntu-latest' }}
        run: |
          chmod +x dist/${{ github.repository_id }}_${{ matrix.os }}
          tar -czvf dist/${{ github.repository_id }}@${{ github.ref_name }}_${{ matrix.os }}.tar.gz \
            dist/${{ github.repository_id }}_${{ matrix.os }}
          rm -rf dist/${{ github.repository_id }}_${{ matrix.os }}

      - name: Zip on macOS
        if: ${{ matrix.runner_os == 'macos-latest' }}
        run: |
          zip -r "${{ github.repository_id }}@${{ github.ref_name }}_${{ matrix.os }}.zip" dist/
          rm -rf dist/
          mkdir dist/
          mv "${{ github.repository_id }}@${{ github.ref_name }}_${{ matrix.os }}.zip" dist/

      - name: Zip on Windows
        if: ${{ matrix.runner_os == 'windows-latest' }}
        run: |
          # Assumes PyInstaller produced dist\<repo>_Windows.exe
          $archiveName = "${{ github.repository_id }}@${{ github.ref_name }}_${{ matrix.os }}.zip"
          Compress-Archive -Path "dist\${{ github.repository_id }}_${{ matrix.os }}.exe" -DestinationPath "dist\$archiveName"
          if (Test-Path "dist\$archiveName") {
            Remove-Item -Path "dist\${{ github.repository_id }}_${{ matrix.os }}.exe" -Force
          } else {
            Write-Error "Failed to create $archiveName"
            exit 1
          }

      # 1.7) Upload the final archive in dist/ as a build artifact
      - name: Upload distributable EXE
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_dists
          path: dist/*

  publish_pypi:
    name: Publish to PyPI
    environment:
      name: test-pypi-index
      url: https://test.pypi.org/p/nuru_clock
    permissions: 
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Install build
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist & wheel
        run: python -m build --sdist --wheel

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          repository-url: https://test.pypi.org/legacy/

  draft_github_release:
    name: Draft GitHub Release
    runs-on: ubuntu-latest
    needs: build_exe
    steps:
      # 3.1) Download the EXE artifacts produced by build_exe
      - name: Download EXE artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          pattern: "*_dists"

      - name: List release-artifacts (debug)
        run: ls -R release-artifacts

      # 3.2) Create (or update) the Draft Release and attach the binaries
      - name: Draft GitHub Release with EXE artifacts
        uses: ncipollo/release-action@v1.16.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          generateReleaseNotes: true
          draft: true
          name: "${{ github.repository }}_${{ github.ref_name }}"
          body: |
            ## What's included
            • EXE binaries for Windows, macOS, Linux  
            • Python source/package (published to PyPI in a separate job)  
            <br>
            _If you have any questions, please refer to our docs or open an issue._
          artifacts: |
            release-artifacts/*_dists/${{ github.repository_id }}_*
